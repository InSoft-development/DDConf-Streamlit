DDCS_URLPREF = 'api/v0/'
DDOS_NetworkProvider = 'systemd-networkd.service'

InstanceConfig = {
	'InstanceName':'CoreServerInstance',
	'ServerIP':"",
	'ServerPort':None,
	'Prefix':DDCS_URLPREF,
	'Config':{ #affected by cset, capply, affects cget
		'tx':{
			'services':{},
			'system':{},
			'network':{},
			'apps':{}
		},
		'rx':{
			'services':{},
			'system':{},
			'network':{},
			'apps':{},
			'cluster':{}
		}
	}, 
	'MonitoredServices':set(),
	'SpecialSyntax':[],
	'Failed':{},
	'Changes':{
		# 'services':{
		# 	'service1':{
		# 		'enable':True,
		# 		'disable':True,
		# 		'stop':True,
		# 		'restart':True,
		# 		'config':{'/path/to/conf1.conf':""} # <= data that will be directly imported into it's config file
		# 	}
		# },
		# 'system':{
		# 	'stop': True,
		# 	'restart':True
		# },
		# 'network':{
		# 	'stop' : False,
		# 	'restart' : False,
		# 	'eth0' : { 
		# 		'up' : True, # вариант императива
		# 		'down' : False, # вариант императива
		# 		'config':{
		# 			'MAC' : 'ae:dc:14:12:28:ff',
		# 			'addr' : '1.2.3.4/24',
		# 			'DHCP' : True
		# 		}
		# 	}
		# },
		# 'apps':{
		# 	'app1':{
		# 		'installed':True,
		# 		'data':True,
		# 		'installer':True
		#   }
		# },
		# 'cluster':{
		# 	'resource1':{
		# 		'stop':True,
		# 		'restart':True,
		# 		'config':""
		# 	}
		# }
	},
	'ConfigLocation':{
		#"monitoredservice1.service":['/dev/null/conf.conf','/dev/null/runvars.conf']
	},
	'Mode':'rx',
	# 'NodeName':''
}

Status = {
	'Tx':{
		'Errornum':0b0, #a binary representation of errors that have occured during status fetching
		'Network':{ # Generated by a function
			# 'eth0':{
				# 'IP':'', # comes with netmask
				# 'MAC':'',
				# 'Status':'', 
				# 'Gateway':'',
				# 'DHCP':False # comes from InstanceConfig['Config']['network'][<iface>]['config']['DHCP']
			# },
			# 'eth1':{
			# 	'IP':'',
			# 	'MAC':'',
			# 	'Status':'', 
			# 	'Gateway':'',
			# 	'DHCP':False
			# }
		},
		'Services':{
			'state':"",
			'unit_count':'',
			'job_count':'',
			'failed':{
				'Count':'',
				'List':[]
			},
			'since':'',
			'systemd':'',
			'monitored_states':{ # states for monitored services set in InstanceConfig
				
			}
		},
		'System':{
			'i_am':[], # uname -a, whoami
			'state':'', # Online/Offline
			'last_up':'', # self explainatory
			'cpu_load':['','','','','','','',''], # per-core
			'ram_load':{
				'RAM':'',
				'Swap':''
			}, 
			'disks':{ # Generated by a function
				# 'sda':{
				# 	'Load':'',
				# 	'Capacity':'',
				# 	'DeviceName':''
				# },
				# 'sdb':{
				# 	'Load':'',
				# 	'Capacity':'',
				# 	'DeviceName':''
				# },
				# 'emmc':{
				# 	'Load':'',
				# 	'Capacity':'',
				# 	'DeviceName':''
				# }
			} #
		},
		'Cluster':{
			'node_status':'',
			'service_status':{
				'pcsd':{
					'State':'',
					'Log':''
				},
				'pacemaker':{
					'State':'',
					'Log':''
				},
				'corosync':{
					'State':'',
					'Log':''
				}
			},
			'agents':{ # Generated by a function
				# 'VIP':{
				# 	'State':'',
				# 	'Config':''
				# }
			},
			'constraints':{}
		}
	},
	'Rx':{
		'Errornum':0b0, #a binary representation of errors that have occured during status fetching
		'Network':{ # Generated by a function
			# 'eth0':{
				# 'IP':'', # comes with netmask
				# 'MAC':'',
				# 'Status':'', 
				# 'Gateway':'',
				# 'DHCP':False # comes from InstanceConfig['Config']['network'][<iface>]['config']['DHCP']
			# },
			# 'eth1':{
			# 	'IP':'',
			# 	'MAC':'',
			# 	'Status':'', 
			# 	'Gateway':'',
			# 	'DHCP':False
			# }
		},
		'Services':{
			'state':"",
			'unit_count':'',
			'job_count':'',
			'failed':{
				'Count':'',
				'List':[]
			},
			'since':'',
			'systemd':'',
			'monitored_states':{ # states for monitored services set in InstanceConfig
				
			}
		},
		'System':{
			'i_am':[], # uname -a, whoami
			'state':'', # Online/Offline
			'last_up':'', # self explainatory
			'cpu_load':['','','','','','','',''], # per-core
			'ram_load':{
				'RAM':'',
				'Swap':''
			}, 
			'disks':{ # Generated by a function
				# 'sda':{
				# 	'Load':'',
				# 	'Capacity':'',
				# 	'DeviceName':''
				# },
				# 'sdb':{
				# 	'Load':'',
				# 	'Capacity':'',
				# 	'DeviceName':''
				# },
				# 'emmc':{
				# 	'Load':'',
				# 	'Capacity':'',
				# 	'DeviceName':''
				# }
			} #
		},
		'Cluster':{
			'node_status':'',
			'service_status':{
				'pcsd':{
					'State':'',
					'Log':''
				},
				'pacemaker':{
					'State':'',
					'Log':''
				},
				'corosync':{
					'State':'',
					'Log':''
				}
			},
			'agents':{ # Generated by a function
				# 'VIP':{
				# 	'State':'',
				# 	'Config':''
				# }
			},
			'constraints':{}
		}
	}
}
 
